(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define('exifr', ['exports'], factory) :
	(global = global || self, factory(global.exifr = {}));
}(this, function (exports) { 'use strict';

	var hasBuffer="undefined"!=typeof Buffer;var isBrowser="undefined"!=typeof navigator;var isWorker=isBrowser&&"undefined"==typeof HTMLImageElement;var isNode="undefined"!=typeof global&&"undefined"!=typeof process&&process.versions&&process.versions.node;function getUint8(a,b){return a.getUint8?a.getUint8(b):a[b]}function getInt8(a,b){return a.getUint8?a.getUint8(b):a.readInt8(b)}function getUint16(a,b,c=!1){return a.getUint16?a.getUint16(b,c):c?a.readUInt16LE(b):a.readUInt16BE(b)}function getInt16(a,b,c=!1){return a.getInt16?a.getInt16(b,c):c?a.readInt16LE(b):a.readInt16BE(b)}function getUint32(a,b,c=!1){return a.getUint32?a.getUint32(b,c):c?a.readUInt32LE(b):a.readUInt32BE(b)}function getInt32(a,b,c=!1){return a.getInt32?a.getInt32(b,c):c?a.readInt32LE(b):a.readInt32BE(b)}function slice(a,b,c){return a.slice?a.slice(b,c):new Uint8Array(a.buffer).subarray(b,c)}function toString(a,b,c){if(a instanceof DataView){if(hasBuffer)return Buffer.from(a.buffer).slice(b,c).toString("ascii",b,c);var d=new TextDecoder("utf-8");return d.decode(slice(a,b,c))}return a.toString("ascii",b,c)}class BufferCursor{constructor(a,b,c){this.buffer=a,this.offset=b||0,this.littleEndian=c;}getUint(a){return 1===a?this.getUint8():2===a?this.getUint16():4===a?this.getUint32():void 0}getUint8(){let a=getUint8(this.buffer,this.offset);return this.offset+=1,a}getUint16(){let a=getUint16(this.buffer,this.offset,this.littleEndian);return this.offset+=2,a}getUint32(){let a=getUint32(this.buffer,this.offset,this.littleEndian);return this.offset+=4,a}}

	const defaultOptions={wholeFile:void 0,seekChunkSize:512,parseChunkSize:65536,postProcess:!0,mergeOutput:!0,jfif:!1,tiff:!0,xmp:!1,icc:!1,iptc:!1,exif:!0,gps:!0,interop:!1,thumbnail:!1};function processOptions(a={}){let b=Object.assign({},defaultOptions);if(!0===a||!1===a){for(let c in b)b[c]=a;b.mergeOutput=defaultOptions.mergeOutput,b.postProcess=defaultOptions.postProcess;}else Object.assign(b,a);return b.mergeOutput&&(b.thumbnail=!1),b}

	if(isNode)if("function"==typeof require)var fsPromise=Promise.resolve(require("fs").promises);else var fsPromise=import("fs").then(a=>a.promises);function findTiff(){throw new Error("findTiff in reader is no longer legal")}class Reader{constructor(a){console.log("Reader"),this.options=processOptions(a);}async read(a){if("string"==typeof a)return this.readString(a);if(isBrowser&&!isWorker&&a instanceof HTMLImageElement)return this.readString(a.src);if(hasBuffer&&Buffer.isBuffer(a))return this.readBuffer(a);if(a instanceof Uint8Array)return this.readUint8Array(a);if(a instanceof ArrayBuffer)return this.readArrayBuffer(a);if(a instanceof DataView)return this.readBuffer(a);if(isBrowser&&a instanceof Blob)return this.readBlob(a);throw new Error("Invalid input argument")}readString(a){if(isBase64Url(a))return this.readBase64(a);if(isBrowser)return this.readUrl(a);if(isNode)return this.readFileFromDisk(a);throw new Error("Invalid input argument")}readUint8Array(a){return this.readArrayBuffer(a.buffer)}readArrayBuffer(a){return this.readBuffer(new DataView(a))}readBuffer(a){return a}async readBlob(a){return this.reader=new BlobReader(a,this.options),this.reader.read(this.options.parseChunkSize)}async readUrl(a){return console.log("readUrl()",a),this.reader=new UrlFetcher(a,this.options),this.reader.read(this.options.parseChunkSize)}async readBase64(a){return this.reader=new Base64Reader(a,this.options),this.reader.read(this.options.seekChunkSize)}async readFileFromDisk(a){return this.reader=new FsReader(a,this.options),this.reader.read()}get mode(){return this.reader?"chunked":"whole"}}class ChunkedReader{constructor(a,b){console.log("ChunkedReader"),this.input=a,this.options=b;}async read(a){if(console.log("ChunkedReader.read()",a),this.forceWholeFile)return this.readWhole();let b=await this.readChunked(a);return b?b:this.allowWholeFile?this.readWhole():void 0}get allowWholeFile(){return !1!==this.options.wholeFile&&(!0===this.options.wholeFile||this.options.wholeFile===void 0)}get forceWholeFile(){return !1!==this.allowWholeFile&&(!0===this.options.wholeFile||this.needWholeFile)}get needWholeFile(){return !!this.options.xmp||!!this.options.icc||!!this.options.iptc}destroy(){}}class FsReader extends ChunkedReader{async readWhole(){console.log("FsReader.readWhole()");let a=await fsPromise,b=await a.readFile(this.input);return b}async readChunk({start:a,size:b}){console.log("FsReader.readChunk()",a,b);let c=Buffer.allocUnsafe(b);return await this.fh.read(c,0,b,a),c}async readChunked(){console.log("FsReader.readChunked()");let a=await fsPromise;this.fh=await a.open(this.input,"r");try{var b=Buffer.allocUnsafe(this.options.seekChunkSize),{bytesRead:c}=await this.fh.read(b,0,b.length,null);if(!c)return this.destroy();var d=findTiff(b);if(d&&d.start&&d.size){var e=await this.readChunk(d);return [e,{start:0}]}}catch(a){throw a}}async destroy(){this.fh&&(await this.fh.close().catch(console.error),this.fh=void 0);}}class WebReader extends ChunkedReader{async readWhole(){console.log("WebReader.readWhole()");let a=await this.readChunk();return a}async readChunked(a){console.log("WebReader.readChunked()",a);let b=await this.readChunk({start:0,end:a,size:a});console.log("view",b);}}function sanitizePosition(a={}){let{start:b,size:c,end:d}=a;return void 0===b?{start:0}:(void 0===c?void 0!==d&&(c=d-b):d=b+c,{start:b,size:c,end:d})}class Base64Reader extends WebReader{readChunk(a){console.log("Base64Reader.readChunk()",a);let{start:b,end:c}=sanitizePosition(a),d=this.input.replace(/^data\:([^\;]+)\;base64,/gmi,"");if(hasBuffer)var e=Buffer.from(d,"base64").slice(b,c).buffer;else{var f=0;if(b!==void 0||c!==void 0){if(b===void 0)var g=b=0;else{var g=4*Math.floor(b/3);f=b-3*(g/4);}if(void 0===c){var h=d.length;c=3*(h/4);}else var h=4*Math.ceil(c/3);d=d.slice(g,h);var j=c-b;}else var j=3*(d.length/4);for(var k=atob(d),e=new ArrayBuffer(j),l=new Uint8Array(e),m=0;m<j;m++)l[m]=k.charCodeAt(f+m);}return new DataView(e)}}class UrlFetcher extends WebReader{async readChunk(a){console.log("UrlFetcher.readChunk()",a);let{start:b,end:c}=sanitizePosition(a);console.log("start, end",b,c);let d=this.input,e={};(b||c)&&(e.range="bytes=".concat([b,c].join("-"))),console.log("headers.range",e.range);let f=await fetch(d,{headers:e});console.log("res",f);let g=new DataView((await f.arrayBuffer()));return console.log("chunk",g),g}}class BlobReader extends WebReader{readChunk(a){console.log("BlobReader.readChunk()",a);let{start:b,end:c}=sanitizePosition(a),d=this.input;return c&&(d=d.slice(b,c)),new Promise((a,b)=>{let c=new FileReader;c.onloadend=()=>a(new DataView(c.result||new ArrayBuffer(0))),c.onerror=b,c.readAsArrayBuffer(d);})}}function isBase64Url(a){return a.startsWith("data:")||1e4<a.length}

	const exif={1:"InteropIndex",2:"InteropVersion",11:"ProcessingSoftware",254:"SubfileType",255:"OldSubfileType",256:"ImageWidth",257:"ImageHeight",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Thresholding",264:"CellWidth",265:"CellLength",266:"FillOrder",269:"DocumentName",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",285:"PageName",286:"XPosition",287:"YPosition",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",292:"T4Options",293:"T6Options",296:"ResolutionUnit",297:"PageNumber",300:"ColorResponseUnit",301:"TransferFunction",305:"Software",306:"ModifyDate",315:"Artist",316:"HostComputer",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",320:"ColorMap",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFD",332:"InkSet",333:"InkNames",334:"NumberofInks",336:"DotRange",337:"TargetPrinter",338:"ExtraSamples",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",435:"T82Options",437:"JPEGTables",512:"JPEGProc",513:"ThumbnailOffset",514:"ThumbnailLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"ApplicationNotes",999:"USPTOMiscellaneous",4096:"RelatedImageFileFormat",4097:"RelatedImageWidth",4098:"RelatedImageHeight",18246:"Rating",18247:"XP_DIP_XML",18248:"StitchInfo",18249:"RatingPercent",32781:"ImageID",32931:"WangTag1",32932:"WangAnnotation",32933:"WangTag3",32934:"WangTag4",32995:"Matteing",32996:"DataType",32997:"ImageDepth",32998:"TileDepth",33405:"Model2",33421:"CFARepeatPatternDim",33422:"CFAPattern2",33423:"BatteryLevel",33424:"KodakIFD",33432:"Copyright",33434:"ExposureTime",33437:"FNumber",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"PixelScale",33589:"AdventScale",33590:"AdventRevision",33628:"UIC1Tag",33629:"UIC2Tag",33630:"UIC3Tag",33631:"UIC4Tag",33723:"IPTC-NAA",33918:"IntergraphPacketData",33919:"IntergraphFlagRegisters",33920:"IntergraphMatrix",33921:"INGRReserved",33922:"ModelTiePoint",34016:"Site",34017:"ColorSequence",34018:"IT8Header",34019:"RasterPadding",34020:"BitsPerRunLength",34021:"BitsPerExtendedRunLength",34022:"ColorTable",34023:"ImageColorIndicator",34024:"BackgroundColorIndicator",34025:"ImageColorValue",34026:"BackgroundColorValue",34027:"PixelIntensityRange",34028:"TransparencyIndicator",34029:"ColorCharacterization",34030:"HCUsage",34031:"TrapIndicator",34032:"CMYKEquivalent",34118:"SEMInfo",34152:"AFCP_IPTC",34232:"PixelMagicJBIGOptions",34264:"ModelTransform",34306:"WB_GRGBLevels",34310:"LeafData",34377:"PhotoshopSettings",34665:"ExifIFDPointer",34675:"ICC_Profile",34687:"TIFF_FXExtensions",34688:"MultiProfiles",34689:"SharedData",34690:"T88Options",34732:"ImageLayer",34735:"GeoTiffDirectory",34736:"GeoTiffDoubleParams",34737:"GeoTiffAsciiParams",34850:"ExposureProgram",34852:"SpectralSensitivity",34853:"GPSInfoIFDPointer",34855:"ISO",34856:"Opto-ElectricConvFactor",34857:"Interlace",34858:"TimeZoneOffset",34859:"SelfTimerMode",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",34908:"FaxRecvParams",34909:"FaxSubAddress",34910:"FaxRecvTime",34954:"LeafSubIFD",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37387:"FlashEnergy",37388:"SpatialFrequencyResponse",37389:"Noise",37390:"FocalPlaneXResolution",37391:"FocalPlaneYResolution",37392:"FocalPlaneResolutionUnit",37393:"ImageNumber",37394:"SecurityClassification",37395:"ImageHistory",37396:"SubjectArea",37397:"ExposureIndex",37398:"TIFF-EPStandardID",37399:"SensingMethod",37434:"CIP3DataFile",37435:"CIP3Sheet",37436:"CIP3Side",37439:"StoNits",37500:"MakerNote",37510:"UserComment",37520:"SubSecTime",37521:"SubSecTimeOriginal",37522:"SubSecTimeDigitized",37679:"MSDocumentText",37680:"MSPropertySetStorage",37681:"MSDocumentTextPosition",37724:"ImageSourceData",40091:"XPTitle",40092:"XPComment",40093:"XPAuthor",40094:"XPKeywords",40095:"XPSubject",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",40965:"InteroperabilityIFDPointer",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41485:"Noise",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41489:"ImageNumber",41490:"SecurityClassification",41491:"ImageHistory",41492:"SubjectLocation",41493:"ExposureIndex",41494:"TIFF-EPStandardID",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFormat",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42112:"GDALMetadata",42113:"GDALNoData",42240:"Gamma",44992:"ExpandSoftware",44993:"ExpandLens",44994:"ExpandFilm",44995:"ExpandFilterLens",44996:"ExpandScanner",44997:"ExpandFlashLamp",48129:"PixelFormat",48130:"Transformation",48131:"Uncompressed",48132:"ImageType",48256:"ImageWidth",48257:"ImageHeight",48258:"WidthResolution",48259:"HeightResolution",48320:"ImageOffset",48321:"ImageByteCount",48322:"AlphaOffset",48323:"AlphaByteCount",48324:"ImageDataDiscard",48325:"AlphaDataDiscard",50215:"OceScanjobDesc",50216:"OceApplicationSelector",50217:"OceIDNumber",50218:"OceImageLogic",50255:"Annotations",50341:"PrintIM",50560:"USPTOOriginalContentType",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"DNGLensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50739:"ShadowScale",50740:"DNGPrivateData",50741:"MakerNoteSafety",50752:"RawImageSegmentation",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50781:"RawDataUniqueID",50784:"AliasLayerMetadata",50827:"OriginalRawFileName",50828:"OriginalRawFileData",50829:"ActiveArea",50830:"MaskedAreas",50831:"AsShotICCProfile",50832:"AsShotPreProfileMatrix",50833:"CurrentICCProfile",50834:"CurrentPreProfileMatrix",50879:"ColorimetricReference",50898:"PanasonicTitle",50899:"PanasonicTitle2",50931:"CameraCalibrationSig",50932:"ProfileCalibrationSig",50933:"ProfileIFD",50934:"AsShotProfileName",50935:"NoiseReductionApplied",50936:"ProfileName",50937:"ProfileHueSatMapDims",50938:"ProfileHueSatMapData1",50939:"ProfileHueSatMapData2",50940:"ProfileToneCurve",50941:"ProfileEmbedPolicy",50942:"ProfileCopyright",50964:"ForwardMatrix1",50965:"ForwardMatrix2",50966:"PreviewApplicationName",50967:"PreviewApplicationVersion",50968:"PreviewSettingsName",50969:"PreviewSettingsDigest",50970:"PreviewColorSpace",50971:"PreviewDateTime",50972:"RawImageDigest",50973:"OriginalRawFileDigest",50974:"SubTileBlockSize",50975:"RowInterleaveFactor",50981:"ProfileLookTableDims",50982:"ProfileLookTableData",51008:"OpcodeList1",51009:"OpcodeList2",51022:"OpcodeList3",51041:"NoiseProfile",51043:"TimeCodes",51044:"FrameRate",51058:"TStop",51081:"ReelName",51089:"OriginalDefaultFinalSize",51090:"OriginalBestQualitySize",51091:"OriginalDefaultCropSize",51105:"CameraLabel",51107:"ProfileHueSatMapEncoding",51108:"ProfileLookTableEncoding",51109:"BaselineExposureOffset",51110:"DefaultBlackRender",51111:"NewRawImageDigest",51112:"RawToPreviewGain",51125:"DefaultUserCrop",59932:"Padding",59933:"OffsetSchema",65e3:"OwnerName",65001:"SerialNumber",65002:"Lens",65024:"KDC_IFD",65100:"RawFile",65101:"Converter",65102:"WhiteBalance",65105:"Exposure",65106:"Shadows",65107:"Brightness",65108:"Contrast",65109:"Saturation",65110:"Sharpness",65111:"Smoothness",65112:"MoireFilter"};const gps={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"};const valueString={ExposureProgram:{0:"Not defined",1:"Manual",2:"Normal program",3:"Aperture priority",4:"Shutter priority",5:"Creative program",6:"Action program",7:"Portrait mode",8:"Landscape mode"},MeteringMode:{0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},LightSource:{0:"Unknown",1:"Daylight",2:"Fluorescent",3:"Tungsten (incandescent light)",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 - 5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},Flash:{0:"Flash did not fire",1:"Flash fired",5:"Strobe return light not detected",7:"Strobe return light detected",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},FocalPlaneResolutionUnit:{1:"No absolute unit of measurement",2:"Inch",3:"Centimeter"},SensingMethod:{1:"Not defined",2:"One-chip color area sensor",3:"Two-chip color area sensor",4:"Three-chip color area sensor",5:"Color sequential area sensor",7:"Trilinear sensor",8:"Color sequential linear sensor"},SceneType:{1:"Directly photographed"},CFAPattern:{0:"Red",1:"Green",2:"Blue",3:"Cyan",4:"Magenta",5:"Yellow",6:"White"},CustomRendered:{0:"Normal process",1:"Custom process"},ExposureMode:{0:"Auto exposure",1:"Manual exposure",2:"Auto bracket"},WhiteBalance:{0:"Auto white balance",1:"Manual white balance"},SceneCaptureType:{0:"Standard",1:"Landscape",2:"Portrait",3:"Night scene"},GainControl:{0:"None",1:"Low gain up",2:"High gain up",3:"Low gain down",4:"High gain down"},Contrast:{0:"Normal",1:"Soft",2:"Hard"},Saturation:{0:"Normal",1:"Low saturation",2:"High saturation"},Sharpness:{0:"Normal",1:"Soft",2:"Hard"},SubjectDistanceRange:{0:"Unknown",1:"Macro",2:"Close view",3:"Distant view"},FileSource:{3:"DSC"},Components:{0:"-",1:"Y",2:"Cb",3:"Cr",4:"R",5:"G",6:"B"}};const dates=["DateTimeOriginal","DateTimeDigitized","ModifyDate"];const iptc={15:"category",25:"keywords",55:"dateCreated",80:"byline",85:"bylineTitle",90:"city",95:"state",101:"country",105:"headline",110:"credit",115:"source",116:"copyright",120:"caption",122:"captionWriter"};

	const SIZE_LOOKUP={1:1,2:1,3:2,4:4,5:8,6:1,7:1,8:2,9:4,10:8,11:4,12:8,13:4},THUMB_OFFSET=513,THUMB_LENGTH=514,IFD_EXIF=34665,IFD_INTEROP=40965,IFD_GPS=34853,TIFF_LITTLE_ENDIAN=18761,TIFF_BIG_ENDIAN=19789;class AppSegment{static canHandle(){return !1}constructor(a,b,c){Object.assign(this,b),this.buffer=a,this.options=c;}static parsePosition(a,b){var c=getUint16(a,b+2)+2,d=b+this.headerLength,e=c-this.headerLength;return {offset:b,length:c,start:d,size:e,end:d+e}}}AppSegment.headerLength=4;class Jfif extends AppSegment{static canHandle(a,b){return 224===getUint8(a,b+1)&&1246120262===getUint32(a,b+4)&&0===getUint8(a,b+8)}parse(){this.bc=new BufferCursor(this.buffer,this.start);let a={version:this.bc.getUint16(),units:this.bc.getUint8(),Xdensity:this.bc.getUint16(),Ydensity:this.bc.getUint16(),Xthumbnail:this.bc.getUint8(),Ythumbnail:this.bc.getUint8()};return this.output=this.options.mergeOutput?{jfif:a}:a,this.output}static prettify(a){let b=a.version;return a.version=((65280&b)>>8).toString(16)+"."+(255&b).toString(16).padStart(2,"0"),a.units=2===a.units?"cm":1===a.units?"inches":a.units,a}}Jfif.headerLength=9;class Iptc extends AppSegment{parse(){let a={};for(var b=this.start,b=0;b<this.end;b++)if(28===getUint8(this.buffer,b)&&2===getUint8(this.buffer,b+1)){let c=getInt16(this.buffer,b+3),d=getUint8(this.buffer,b+2),e=iptc[d]||d,f=toString(this.buffer,b+5,b+5+c);a[e]=this.setValueOrArrayOfValues(f,a[e]);}return this.output=this.options.mergeOutput?{iptc:a}:a,this.output}setValueOrArrayOfValues(a,b){return void 0===b?a:b instanceof Array?(b.push(a),b):[b,a]}}class Xmp extends AppSegment{static canHandle(a,b){return 225===getUint8(a,b+1)&&1752462448===getUint32(a,b+4)}constructor(a,b,c){super(),Object.assign(this,b),this.buffer=a,this.options=c;}parse(){let a=toString(this.buffer,this.start,this.end);if(this.options.postProcess||this.parseXml){let b=a.indexOf("<x:xmpmeta"),c=a.indexOf("x:xmpmeta>")+10;if(a=a.slice(b,c),this.parseXml)return this.parseXml(a)}return this.output={xmp:a},this.output}}class Tiff extends AppSegment{parseHeader(){var a=getUint16(this.buffer,this.start);if(a===TIFF_LITTLE_ENDIAN)this.le=!0;else if(a===TIFF_BIG_ENDIAN)this.le=!1;else throw new Error("Invalid EXIF data: expected byte order marker (0x4949 or 0x4D4D).");if(42!==getUint16(this.buffer,this.start+2,this.le))throw new Error("Invalid EXIF data: expected 0x002A.");this.ifd0Offset=getUint32(this.buffer,this.start+4,this.le);}parseTags(a,b=this.buffer){var c=getUint16(a,b,this.le);b+=2;for(var d={},e=0;e<c;e++){var f=getUint16(a,b,this.le),g=this.parseTag(b,a);d[f]=g,b+=12;}return d}parseTag(a,b=this.buffer){var c=getUint16(b,a+2,this.le),d=getUint32(b,a+4,this.le),e=SIZE_LOOKUP[c];if(4>=e*d)var f=a+8;else var f=this.start+getUint32(b,a+8,this.le);if(f>b.buffer.byteLength)throw new Error("tiff value offset ".concat(f," is out of chunk size ").concat(b.buffer.byteLength));if(2===c){var g=f+d,h=toString(b,f,g);return h.endsWith("\0")?h.slice(0,-1):h}if(7===c)return slice(b,f,f+d);if(1===d)return this.parseTagValue(c,f,b);for(var j=[],k=0;k<d;k++)j.push(this.parseTagValue(c,f,b)),f+=e;return j}parseTagValue(a,b,c){switch(a){case 1:return getUint8(c,b);case 3:return getUint16(c,b,this.le);case 4:return getUint32(c,b,this.le);case 5:return getUint32(c,b,this.le)/getUint32(c,b+4,this.le);case 6:return getInt8(c,b);case 8:return getInt16(c,b,this.le);case 9:return getInt32(c,b,this.le);case 10:return getInt32(c,b,this.le)/getInt32(c,b+4,this.le);case 13:return getUint32(c,b,this.le);default:throw new Error("Invalid tiff type ".concat(a));}}}class Exif extends Tiff{static canHandle(a,b){return 225===getUint8(a,b+1)&&1165519206===getUint32(a,b+4)&&0===getUint16(a,b+8)}async parse(){this.parseHeader(),await this.parseIfd0Block(),this.options.exif&&(await this.parseExifBlock()),this.options.gps&&(await this.parseGpsBlock()),this.options.interop&&(await this.parseInteropBlock()),this.options.thumbnail&&(await this.parseThumbnailBlock());let{image:a,exif:b,gps:c,interop:d,thumbnail:e}=this;return this.output=this.options.mergeOutput?Object.assign({},a,b,c,d,e):{image:a,exif:b,gps:c,interop:d,thumbnail:e},this.output}async parseIfd0Block(){if(8>this.ifd0Offset)throw new Error("Invalid EXIF data: IFD0 offset should be less than 8");var a=await this.parseTags(this.start+this.ifd0Offset);0===Object.keys(a).length||(this.exifOffset=a[IFD_EXIF],this.interopOffset=a[IFD_INTEROP],this.gpsOffset=a[IFD_GPS],this.imageRaw=a,this.options.postProcess&&(delete this.imageRaw[IFD_EXIF],delete this.imageRaw[IFD_INTEROP],delete this.imageRaw[IFD_GPS]),this.image=this.translateBlock(this.imageRaw,exif));}async parseExifBlock(){void 0===this.exifOffset||(this.exifRaw=await this.parseTags(this.start+this.exifOffset),this.exif=this.translateBlock(this.exifRaw,exif));}async parseGpsBlock(){if(void 0!==this.gpsOffset){this.gpsRaw=await this.parseTags(this.start+this.gpsOffset),this.gps=this.translateBlock(this.gpsRaw,gps);let a=this.gps;this.options.postProcess&&(a.GPSDateStamp&&a.GPSTimeStamp&&(a.timestamp=reviveDate(a.GPSDateStamp+" "+a.GPSTimeStamp)),a&&a.GPSLatitude&&(a.latitude=ConvertDMSToDD(...a.GPSLatitude,a.GPSLatitudeRef),a.longitude=ConvertDMSToDD(...a.GPSLongitude,a.GPSLongitudeRef)));}}async parseInteropBlock(){this.interopOffset=this.interopOffset||this.exifRaw&&this.exifRaw[IFD_INTEROP];void 0===this.interopOffset||(this.interopRaw=await this.parseTags(this.start+this.interopOffset),this.interop=this.translateBlock(this.interopRaw,exif));}async parseThumbnailBlock(a=!1){if(this.thumbnailParsed)return !0;if(!1===a&&this.options.mergeOutput)return !1;let b=getUint16(this.buffer,this.start+this.ifd0Offset,this.le),c=this.start+this.ifd0Offset+2+12*b;return (this.ifd1Offset=getUint32(this.buffer,c,this.le),0!==this.ifd1Offset)&&(this.thumbnailRaw=await this.parseTags(this.start+this.ifd1Offset),this.thumbnail=this.translateBlock(this.thumbnailRaw,exif),this.thumbnailParsed=!0,!0)}async parseTags(a){if(!(a>this.buffer.byteLength))var b=this.buffer;else if("chunked"===this.mode){var b=await this.reader.readChunk({start:a,size:1e4});a=0;}else throw new Error("segment offset ".concat(a," is out of chunk size ").concat(this.buffer.byteLength));return super.parseTags(b,a)}translateBlock(a,b){if(this.options.postProcess||this.options.translateTags){let c=Object.entries(a).map(([a,c])=>{var d=b[a]||a;return [d,translateValue(d,c)]});return Object.fromEntries(c)}return a}}Exif.headerLength=10;let allParserClasses=[Jfif,Exif,Xmp,Iptc];for(let a of allParserClasses)a.type=a.name.toLowerCase(),allParserClasses[a.type]=a;class Exifr extends Reader{constructor(...a){console.log("ExifParser"),super(...a),this.pos={},this.requiredParsers=allParserClasses.filter(a=>!!this.options[a.type]),console.log("allParserClasses",allParserClasses),console.log("requiredParsers",this.requiredParsers),console.log("options",this.options);}async read(a){if(console.log("read 1",a),console.log("read 2"),this.buffer=await super.read(a),console.log("read 3"),console.log("this.buffer",this.buffer),void 0===this.buffer)throw new Error("buffer is undefined, not enough file read? maybe file wasnt read at all");console.log("read 4"),this.findAppSegments(),console.log("read 5");}findAppSegments(a=0){console.log("findAppSegments");let b=this.buffer,c=(b.length||b.byteLength)-10;this.segments=[],this.unknownSegments=[],console.log("length",c);var d=getUint16(b,0);for((d===TIFF_LITTLE_ENDIAN||d===TIFF_BIG_ENDIAN)&&this.segments.push({start:0,type:"exif"});a<c;a++)if(255===getUint8(b,a)&&224==(240&getUint8(b,a+1))){let c=this.getSegmentType(b,a);if(c){let d=allParserClasses[c],e=d.parsePosition(b,a);e.type=c,this.segments.push(e),e.end?a=e.end-1:e.length&&(a+=e.length-1);}else{let c=AppSegment.parsePosition(b,a);this.unknownSegments.push(c);}}console.log("segments",this.segments),console.log("unknownSegments",this.unknownSegments);}getSegmentType(a,b){for(let c of allParserClasses)if(c.canHandle(a,b))return c.type}async parse(){this.parsers={};let a={},b=this.segments.filter(a=>!!this.options[a.type]).map(async b=>{let c=allParserClasses[b.type],d=new c(this.buffer,b,this.options);this.parsers[b.type]=d,await d.parse(),this.options.mergeOutput&&"string"!=typeof d.output?Object.assign(a,d.output):a[b.type]=d.output;});return await Promise.all(b),a}async extractThumbnail(){if(void 0===this.pos.tiff)return;if(this.tiffParsed||(await this.parseTiff()),this.thumbnailParsed||(await this.parseThumbnailBlock(!0)),void 0===this.thumbnail)return;let a=this.thumbnail[THUMB_OFFSET]+this.pos.tiff.start,b=this.thumbnail[THUMB_LENGTH],c=this.buffer.buffer,d=c.slice(a,a+b);return "undefined"==typeof Buffer?d:Buffer.from(d)}async parseTiff(){if(!this.tiffParsed)return this.tiffParsed=!0,this.tiffParser=new Exif(this.buffer,this.pos.tiff),this.tiff=this.tiffParser.parse()}}var ExifParser=Exifr;function translateValue(a,b){return void 0===b||null===b?void 0:dates.includes(a)?reviveDate(b):"SceneType"===a?Array.from(b).map(a=>valueString.SceneType[a]).join(", "):"ComponentsConfiguration"===a?Array.from(b).map(a=>valueString.Components[a]).join(", "):void 0===valueString[a]?"FlashpixVersion"===a||"ExifVersion"===a?toString(b):"GPSVersionID"===a?Array.from(b).join("."):"GPSTimeStamp"===a?Array.from(b).join(":"):b:valueString[a][b]||b}function reviveDate(a){if("string"!=typeof a)return null;a=a.trim();var[b,c]=a.split(" "),[d,e,f]=b.split(":").map(Number),g=new Date(d,e-1,f);if(c){var[h,i,j]=c.split(":").map(Number);g.setHours(h),g.setMinutes(i),g.setSeconds(j);}return g}function ConvertDMSToDD(a,b,c,d){var e=a+b/60+c/3600;return ("S"==d||"W"==d)&&(e*=-1),e}

	async function parse(a,b){console.log("a");let c=new ExifParser(b);return console.log("b"),await c.read(a),console.log("c"),c.parse()}async function thumbnailBuffer(a,b={}){let c=new ExifParser(b);return await c.read(a),void 0===c.tiffPosition?void 0:c.extractThumbnail()}async function thumbnailUrl(...a){let b=await thumbnailBuffer(...a);if(b!==void 0){let a=new Blob([b]);return URL.createObjectURL(a)}}

	exports.Exif = Exif;
	exports.ExifParser = ExifParser;
	exports.Exifr = Exifr;
	exports.Iptc = Iptc;
	exports.Jfif = Jfif;
	exports.Tiff = Tiff;
	exports.defaultOptions = defaultOptions;
	exports.parse = parse;
	exports.thumbnailBuffer = thumbnailBuffer;
	exports.thumbnailUrl = thumbnailUrl;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
